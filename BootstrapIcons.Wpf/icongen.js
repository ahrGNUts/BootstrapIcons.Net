const path = require('path');
const fs = require('fs/promises');
const camelCase = require('camelcase');
const { JSDOM } = require('jsdom');

const enumCsPath = path.resolve(__dirname, 'BootstrapIconGlyph.generated.cs');

const bootstrapIconData = require('./node_modules/bootstrap-icons/font/bootstrap-icons.json');
const bootstrapIconSvg = './node_modules/bootstrap-icons/bootstrap-icons.svg';
const jsdomOpts = {};

const namespace = 'BootstrapIcons.Wpf';

const writeSummary = async function(handle, text, indentLevel) {
    const indent = '\t'.repeat(indentLevel);
    await handle.write(indent + '/// <summary>\r\n');
    await handle.write(indent + '/// ' + text + '\r\n');
    await handle.write(indent + '/// </summary>\r\n');
};

(async function() {
    let handle;
    try {
        handle = await fs.open(enumCsPath, 'w');
        let allSvgIcons = await JSDOM.fromFile(bootstrapIconSvg, jsdomOpts);
        
        await handle.write('//------------------------------------------------------------------------------\r\n');
        await handle.write('// <auto-generated>\r\n');
        await handle.write('//     This code was generated by a tool\r\n');
        await handle.write('//\r\n');
        await handle.write('//     Changes to this file may cause incorrect behavior and will be lost if\r\n');
        await handle.write('//     the code is regenerated.\r\n');
        await handle.write('// </auto-generated>\r\n');
        await handle.write('//------------------------------------------------------------------------------\r\n\r\n');
        await handle.write('using ' + namespace + '.Attributes;\r\n\r\n');
        await handle.write('namespace ' + namespace + '\r\n');
        await handle.write('{\r\n');
        await writeSummary(handle, 'Represents a Bootstrap Icon glyph', 1);
        await handle.write('\tpublic enum BootstrapIconGlyph : ushort\r\n');
        await handle.write('\t{\r\n');
        await writeSummary(handle, 'No icon', 2);
        await handle.write(`\t\tNone = 0,\r\n`);
        for (let id in bootstrapIconData) {
            if (!bootstrapIconData.hasOwnProperty(id)) continue;
            let identifier = camelCase(id, {pascalCase: true});
            
            let symbol = allSvgIcons.window.document.getElementById(id);
            if (!symbol) throw new Error('Failed to find SVG symbol: ' + id);
            
            let viewBox = symbol.getAttribute('viewBox').split(' ');
            let svgWidth = viewBox[2];
            let svgHeight = viewBox[3];
            
            let svgPath = null;
            
            let path = symbol.querySelector('path');
            if (path)
            {
                svgPath = path.getAttribute('d');
            }
            
            if (!svgPath)
            {
                // Convert the SVG circle into a path
                // https://stackoverflow.com/questions/5737975/circle-drawing-with-svgs-arc-path/10477334#10477334
                let circle = symbol.querySelector('circle');
                if (circle)
                {
                    let cx = parseFloat(circle.getAttribute('cx'));
                    let cy = parseFloat(circle.getAttribute('cy'));
                    let r = parseFloat(circle.getAttribute('r'));
                    
                    if (!Number.isNaN(cx) && !Number.isNaN(cy) && !Number.isNaN(r)) {
                        // M cx-r cy
                        // a r,r 0 1,0 (r * 2),0
                        // a r,r 0 1,0 -(r * 2),0
                        svgPath = `M ${cx - r},${cy} a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${r * 2},0`;
                    }
                }
            }
            
            if (!svgPath) throw new Error('Failed to find SVG path: ' + id);
            
            await writeSummary(handle, id + ' icon', 2);
            await handle.write(`\t\t[IconId("${id}")]\r\n`);
            await handle.write('\t\t[SvgPath(' + svgWidth + ', ' + svgHeight + ', "' + svgPath + '")]\r\n');
            await handle.write(`\t\t${identifier} = ${bootstrapIconData[id]},\r\n`);
        }
        await handle.write('\t}\r\n');
        await handle.write('}\r\n');
    } catch (error) {
        console.error('Failed to generate BootstrapIconGlyph enum: ' + error.message);
    } finally {
        if (handle) await handle.close();
    }
})();
